#!/usr/bin/env python3
"""Script de desarrollo para SiKIdle m√≥vil.

Este script facilita las tareas comunes de desarrollo para la versi√≥n m√≥vil
del juego, incluyendo testing, compilaci√≥n para Android, etc.
"""

import os
import subprocess
import sys
from pathlib import Path


def run_command(cmd: str, description: str) -> bool:
	"""Ejecuta un comando y muestra el resultado."""
	print(f"\nüîÑ {description}...")
	print(f"Ejecutando: {cmd}")
	
	result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
	
	if result.returncode == 0:
		print(f"‚úÖ {description} completado exitosamente")
		if result.stdout:
			print(result.stdout)
		return True
	else:
		print(f"‚ùå Error en {description}")
		if result.stderr:
			print(f"Error: {result.stderr}")
		return False


def test_mobile_simulation():
	"""Ejecuta el juego en modo simulaci√≥n m√≥vil."""
	print("üéÆ Iniciando SiKIdle en modo simulaci√≥n m√≥vil...")
	os.chdir(Path(__file__).parent.parent.parent)
	
	# Ejecutar el juego
	cmd = "python src/main.py"
	return run_command(cmd, "Ejecuci√≥n en modo m√≥vil")


def build_android_debug():
	"""Compila una APK de debug para Android."""
	print("üì± Iniciando compilaci√≥n para Android (debug)...")
	os.chdir(Path(__file__).parent.parent.parent)
	
	# Verificar que buildozer est√© instalado
	if not run_command("buildozer --version", "Verificaci√≥n de buildozer"):
		print("‚ùå Buildozer no est√° instalado. Inst√°lalo con: pip install buildozer")
		return False
	
	# Compilar APK debug
	return run_command("buildozer android debug", "Compilaci√≥n Android debug")


def clean_build():
	"""Limpia los archivos de compilaci√≥n."""
	print("üßπ Limpiando archivos de compilaci√≥n...")
	os.chdir(Path(__file__).parent.parent.parent)
	
	commands = [
		"buildozer android clean",
		"rm -rf .buildozer",
		"rm -rf bin"
	]
	
	success = True
	for cmd in commands:
		if not run_command(cmd, f"Limpieza: {cmd}"):
			success = False
	
	return success


def setup_android_dev():
	"""Configura el entorno de desarrollo para Android."""
	print("‚öôÔ∏è Configurando entorno de desarrollo Android...")
	
	# Verificar dependencias
	dependencies = [
		("python", "Python"),
		("pip", "pip"),
		("git", "Git")
	]
	
	for cmd, name in dependencies:
		if not run_command(f"{cmd} --version", f"Verificaci√≥n de {name}"):
			print(f"‚ùå {name} no est√° disponible")
			return False
	
	# Instalar dependencias Python
	cmd = "pip install buildozer cython"
	return run_command(cmd, "Instalaci√≥n de dependencias Android")


def main():
	"""Funci√≥n principal del script."""
	if len(sys.argv) < 2:
		print("""
üéÆ SiKIdle - Script de Desarrollo M√≥vil

Uso: python mobile_dev.py [comando]

Comandos disponibles:
test          - Ejecutar en modo simulaci√≥n m√≥vil
build         - Compilar APK debug para Android  
clean         - Limpiar archivos de compilaci√≥n
setup         - Configurar entorno de desarrollo Android

Ejemplos:
python mobile_dev.py test
python mobile_dev.py build
		""")
		return
	
	command = sys.argv[1].lower()
	
	if command == "test":
		test_mobile_simulation()
	elif command == "build":
		build_android_debug()
	elif command == "clean":
		clean_build()
	elif command == "setup":
		setup_android_dev()
	else:
		print(f"‚ùå Comando desconocido: {command}")
		main()


if __name__ == "__main__":
	main()
